/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT_L 0
#define SYMBOLS_L 1
#define ARROWS_L  2
#define NUMBERS_L 3

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };

        capslock {
            bindings = <&kp CLCK>;
            key-positions = <5 4>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <3 4>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <9 8>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <10 9>;
        };

        prtsc {
            bindings = <&kp PRINTSCREEN>;
            key-positions = <29 28>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <6 7>;
        };

        sys_reset_left {
            bindings = <&sys_reset>;
            key-positions = <29 1>;
        };

        sys_reset_right {
            bindings = <&sys_reset>;
            key-positions = <30 10>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <7 8>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "0";
            bindings = <
&none  &mt GRAVE Q  &kp W       &kp E         &kp R        &kp T        &kp Y       &kp U        &kp I           &kp O         &mt BSLH P     &none
&none  &mt LGUI A   &mt LALT S  &mt LSHIFT D  &mt LCTRL F  &kp G        &kp H       &mt RCTRL J  &mt RSHIFT K    &mt RALT L    &mt RGUI SEMI  &none
&none  &kp Z        &kp X       &kp C         &kp V        &kp B        &kp N       &kp M        &mt LBKT COMMA  &mt RBKT DOT  &mt SQT FSLH   &none
                                &mo 3         &mo 1        &kp SPACE    &kp RETURN  &mo 2        &none
            >;
        };

        arrow_layer {
            label = "1";
            bindings = <
&none  &none     &none     &kp UP    &sys_reset  &none        &kp C_BRI_UP  &kp C_VOL_UP  &kp C_VOL_DN  &kp K_MUTE  &none     &none
&none  &kp LGUI  &kp LEFT  &kp DOWN  &kp RIGHT   &none        &kp C_BRI_DN  &kp RCTRL     &kp RSHFT     &kp RALT    &kp RGUI  &none
&none  &none     &none     &none     &none       &none        &none         &none         &none         &none       &none     &none
                           &none     &none       &kp SPACE    &kp ENTER     &none         &none
            >;
        };

        number_layer {
            label = "2";
            bindings = <
&none  &none     &none     &none      &none      &none        &kp MINUS  &kp N7        &kp N8        &kp N9        &kp BSLH  &none
&none  &kp LGUI  &kp LALT  &kp LSHFT  &kp LCTRL  &none        &kp EQUAL  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp RGUI  &none
&none  &none     &none     &none      &none      &none        &kp N0     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &none     &none
                           &none      &none      &kp SPACE    &kp ENTER  &none         &none
            >;
        };

        bt_layer {
            label = "3";
            bindings = <
&none  &none         &none         &none         &none         &none           &kp F1  &kp F2   &kp F3   &kp F4   &none  &none
&none  &none         &kp C_PP      &kp C_NEXT    &kp C_PREV    &bt BT_CLR      &kp F5  &kp F6   &kp F7   &kp F8   &none  &none
&none  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0    &kp F9  &kp F10  &kp F11  &kp F12  &none  &none
                                   &none         &none         &none           &none   &none    &none
            >;
        };
    };
};
